t = 96 # hrs (4 days)
rr = (a*t^b) # gives rate in mm/hr
data.frame(Return_Period = rp, Rainfall = rr*96)
# Data From Sparwood IDF
rp = c(2,5,10,25,50,100)
a = c(7.7, 10.4, 12.1, 14.3, 15.9, 17.5)
b = c(-0.593, -0.613, -0.621, -0.629, -0.633, -0.637)
m_error = c(2.0,3.5,5.0,6.5,7.4,8.1)/100 # % error
t = 96 # hrs (4 days)
rr = (a*t^b) # gives rate in mm/hr
data.frame(Return_Period = rp, 4_day_Rainfall = rr*96)
data.frame(Return_Period = rp, .4_day_Rainfall = rr*96)
data.frame(Return_Period = rp, day4_Rainfall = rr*96)
# Data From Sparwood IDF
rp = c(2,5,10,25,50,100)
a = c(7.7, 10.4, 12.1, 14.3, 15.9, 17.5)
b = c(-0.593, -0.613, -0.621, -0.629, -0.633, -0.637)
m_error = c(2.0,3.5,5.0,6.5,7.4,8.1)/100 # % error
t = 96 # hrs (4 days)
rr = (a*t^b) # gives rate in mm/hr
data.frame(Return_Period = rp,
day4_Rainfall = round(rr*96),
error = rr*96*m_error           )
# Data From Sparwood IDF
rp = c(2,5,10,25,50,100)
a = c(7.7, 10.4, 12.1, 14.3, 15.9, 17.5)
b = c(-0.593, -0.613, -0.621, -0.629, -0.633, -0.637)
m_error = c(2.0,3.5,5.0,6.5,7.4,8.1)/100 # % error
t = 96 # hrs (4 days)
rr = (a*t^b) # gives rate in mm/hr
data.frame(Return_Period = rp,
day4_Rainfall = round(rr*96),
Standard_Error = round(rr*96*m_error)           )
# Data From Sparwood IDF
rp = c(2,5,10,25,50,100)
a = c(7.7, 10.4, 12.1, 14.3, 15.9, 17.5)
b = c(-0.593, -0.613, -0.621, -0.629, -0.633, -0.637)
m_error = c(2.0,3.5,5.0,6.5,7.4,8.1)/100 # % error
t = 96 # hrs (4 days)
rr = (a*t^b) # gives rate in mm/hr
data.frame(Return_Period = rp,
a = a,
b = b,
day4_Rainfall = round(rr*96),
Standard_Error = round(rr*96*m_error)           )
seq('2000-01-01', '2000-12-01', by = 'month')
seq(as.Date('2000-01-01'), as.Date('2000-12-01'), by = 'month')
data.frame(month = seq(as.Date('2000-01-01'), as.Date('2000-12-01'), by = 'month'),
value = c(1.87, 1.95, 2.06, 1.99, 2.06, 2.08, 2.08, 2.03, 1.90, 1.81, 1.83, 1.85)
)
dat = data.frame(
month = seq(as.Date('2000-01-01'), as.Date('2000-12-01'), by = 'month'),
value = c(1.87, 1.95, 2.06, 1.99, 2.06, 2.08, 2.08, 2.03, 1.90, 1.81, 1.83, 1.85)
)
dat
lo.fit = loess(value~month, dat)
class(dat$month)
month = strptime(seq(as.Date('2000-01-01'), as.Date('2000-12-01'), by = 'month'), '%Y-%m-%d'),
value = c(1.87, 1.95, 2.06, 1.99, 2.06, 2.08, 2.08, 2.03, 1.90, 1.81, 1.83, 1.85)
dat = data.frame(
month = strptime(seq(as.Date('2000-01-01'), as.Date('2000-12-01'), by = 'month'), '%Y-%m-%d'),
value = c(1.87, 1.95, 2.06, 1.99, 2.06, 2.08, 2.08, 2.03, 1.90, 1.81, 1.83, 1.85)
)
lo.fit = loess(value~month, dat)
lo.fit
plot(dat)
lines(predict(lo.fit))
lo.fit = loess(value~1:12, dat)
lo.fit = loess(value~1:12)
lo.fit = loess(dat$value~1:12)
lo.fit = loess(dat$value~c(1:12))
lines(lo.fit)
lines(dat$month, lo.fit)
lo.fit
predict(lo.fit)
lines(dat$month, predict(lo.fit))
lo.fit = loess(dat$value~c(1:12), span = 1)
lines(dat$month, predict(lo.fit))
lo.fit = loess(dat$value~c(1:12), span = 0.1)
lines(dat$month, predict(lo.fit))
lo.fit = loess(dat$value~c(1:12), span = 0.01)
lines(dat$month, predict(lo.fit))
lo.fit = loess(dat$value~c(1:12), span = 0.5)
lines(dat$month, predict(lo.fit))
?filter
x <- 1:100
filter(x, rep(1, 3))
filter(x, rep(1, 3), sides = 1)
filter(x, rep(1, 3), sides = 1, circular = TRUE)
lowess(unemploy, f = 2/3)
plot(lowess(dat$value, f = 2/3))
plot(dat$month, lowess(dat$value, f = 2/3))
lowess(dat$value, f = 2/3)
?lowess
predict.loess(dat$value~c(1:12))
dat = data.frame(
month = strptime(seq(as.Date('2000-01-01'), as.Date('2000-12-01'), by = 'month'), '%Y-%m-%d'),
value = c(1.87, 1.95, 2.06, 1.99, 2.06, 2.08, 2.08, 2.03, 1.90, 1.81, 1.83, 1.85)
)
lo.fit = loess(dat$value~c(1:12), span = 0.5)
lines(dat$month, predict(lo.fit))
rm(list = ls())
# define function "binfil"
binfil = function(x,npt) {
# x  = data series, nx = length of series
# npt = length of filter, must be odd
# nf = number of times filter is applied
# xf = filtered series (output)
nf = floor(npt/2)
xf = x
x1 = numeric(nx)
x2 = numeric(nx)
for (i in 1:nf) {
xmod = xf
x1 = c( NA, xmod[-nx] )
x2 = c( xmod[-1], NA )
xf = (x1 + 2*xmod + x2)*0.25
}
return(xf)
}
# create synthetic series for illustration
nx = 500
x = cos(1:nx/25) + rnorm(nx,0,0.1)
# apply filter
npt = 31
xf = binfil(x,npt)
# plot results
plot(x, xlab="Time", type="l", ylab="Cos Data", ylim=c(-1.7,1.2))
lines(xf, col=2, t="l", lwd = 1)
legend( 250, -1.3,
c("Noisy Data",paste( as.character(npt),"point binomial filter")),
lty = c(1,1),
col = c("black","red"),
bty = "n"
)
xf = binfil(x,100)
# plot results
plot(x, xlab="Time", type="l", ylab="Cos Data", ylim=c(-1.7,1.2))
lines(xf, col=2, t="l", lwd = 1)
legend( 250, -1.3,
c("Noisy Data",paste( as.character(npt),"point binomial filter")),
lty = c(1,1),
col = c("black","red"),
bty = "n"
)
xf = binfil(x,2)
# plot results
plot(x, xlab="Time", type="l", ylab="Cos Data", ylim=c(-1.7,1.2))
lines(xf, col=2, t="l", lwd = 1)
legend( 250, -1.3,
c("Noisy Data",paste( as.character(npt),"point binomial filter")),
lty = c(1,1),
col = c("black","red"),
bty = "n"
)
dat = data.frame(
month = strptime(seq(as.Date('2000-01-01'), as.Date('2000-12-01'), by = 'month'), '%Y-%m-%d'),
value = c(1.87, 1.95, 2.06, 1.99, 2.06, 2.08, 2.08, 2.03, 1.90, 1.81, 1.83, 1.85)
)
lo.fit = loess(dat$value~c(1:12), span = 0.5)
lines(dat$month, predict(lo.fit))
plot(dat$month, dat$value)
lines(dat$month, predict(lo.fit))
op <- par(mfrow = c(2,1), mgp = c(2,.8,0), mar = 0.1+c(3,3,3,1))
n <- 9
x <- 1:n
y <- rnorm(n)
plot(x, y, main = paste("spline[fun](.) through", n, "points"))
lines(spline(x, y))
lines(spline(x, y, n = 201), col = 2)
?spline
lines(spline(x, y, n = 201, 'natural'), col = 2)
plot(x, y, main = paste("spline[fun](.) through", n, "points"))
lines(spline(x, y))
lines(spline(x, y, n = 201, 'natural'), col = 2)
lines(spline(x, y, n = 201, 'fmm'), col = 2)
lines(spline(x, y, n = 201, 'fmm'), col = 3)
plot(dat$month, dat$value)
lines(spline(dat$month, dat$value, n = 365)
)
dat = data.frame(
month = strptime(seq(as.Date('2000-01-01'), as.Date('2000-12-01'), by = 'month'), '%Y-%m-%d'),
value = c(1.87, 1.95, 1.98, 1.99, 2.06, 2.08, 2.08, 2.03, 1.90, 1.81, 1.83, 1.85)
)
plot(dat$month, dat$value)
lines(spline(dat$month, dat$value, n = 365))
dat = data.frame(
month = strptime(seq(as.Date('1970-01-01'), as.Date('2014-12-01'), by = 'month'), '%Y-%m-%d'),
value = rep(c(1.87, 1.95, 1.98, 1.99, 2.06, 2.08, 2.08, 2.03, 1.90, 1.81, 1.83, 1.85), 44)
)
dat = data.frame(
month = strptime(seq(as.Date('1970-01-01'), as.Date('2014-12-01'), by = 'month'), '%Y-%m-%d'),
value = rep(c(1.87, 1.95, 1.98, 1.99, 2.06, 2.08, 2.08, 2.03, 1.90, 1.81, 1.83, 1.85), 45)
)
plot(dat$month, dat$value)
lines(spline(dat$month, dat$value, n = 365))
plot(dat$month, dat$value, cex = 0.1)
lines(spline(dat$month, dat$value, n = 365))
plot(dat$month, dat$value, cex = 0.1)
lines(spline(dat$month, dat$value,
n = length(seq(as.Date('1970-01-01'), as.Date('2014-12-01'), by = 'days'))))
dat
head(dat,12)
dat = data.frame(
month = strptime(seq(as.Date('1970-01-01'), as.Date('2014-12-01'), by = 'month'), '%Y-%m-%d'),
value = rep(c(1.870103,
1.950,
2.055372**,
1.991167,
2.056373,
2.078737,
2.0750,
2.000,
1.903904,
1.807210,
1.832178,
1.850), 45)
)
dat = data.frame(
month = strptime(seq(as.Date('1970-01-01'), as.Date('2014-12-01'), by = 'month'), '%Y-%m-%d'),
value = rep(c(1.870103,
1.950,
2.055372, ##
1.991167,
2.056373,
2.078737,
2.0750,
2.000,
1.903904,
1.807210,
1.832178,
1.850), 45)
)
plot(dat$month, dat$value, cex = 0.1)
lines(spline(dat$month, dat$value,
n = length(seq(as.Date('1970-01-01'), as.Date('2014-12-01'), by = 'days'))))
dat = data.frame(
month = strptime(seq(as.Date('1970-01-01'), as.Date('2014-12-01'), by = 'month'), '%Y-%m-%d'),
value = rep(c(1.870103,
1.950,
2.055372, ##
1.991167,
2.056373,
2.078737,
2.0750,
2.000,
1.903904,
1.807210,
1.832178,
1.850), 45)
)
head(dat)
plot(dat$month, dat$value, cex = 0.1)
plot(dat$month, dat$value, cex = 0.1)
plot(dat$month, dat$value)
plot(dat$month, dat$value)
plot(dat$month, dat$value, data = dat[1:100],)
head(dat, 200)
head(dat)
head(dat,10)
dat = dat[-1:-8,]
head(dat)
plot(dat$month, dat$value, data = dat[1:10,])
dat = data.frame(
month = strptime(seq(as.Date('1970-01-01'), as.Date('2014-12-01'), by = 'month'),
'%Y-%m-%d'),
value = rep(c(1.870103,
1.950,
2.05, ##
2.05,
2.056373,
2.078737,
2.0750,
2.000,
1.903904,
1.807210,
1.832178,
1.850), 45)
)
dat = dat[-1:-8,]
plot(dat$month, dat$value)
lines(spline(dat$month, dat$value,
n = length(seq(as.Date('1970-01-01'), as.Date('2014-12-01'), by = 'days'))))
length(seq(as.Date('1970-09-01'), as.Date('2015-12-31'), by = 'days'))
length(seq(as.Date('1970-01-01'), as.Date('2015-12-31'), by = 'days'))
# Alces Correlations to Riparian Health
rm(list = ls())
library('shiny')
library('dplyr')
library('tidyr')
library('corrplot')                     # package corrplot
library('MASS')
# Fit Plot FUNCTION
fit.plot = function(x){
par(mfrow = c(1,2))
# Plot Predicted Model against Observed Values
plot(data$`Riparian Health`, x$fitted.values, pch = 19,
xlab = 'Observed Riparian Health', ylab = 'Predicted Riparian Health',
main = '')
abline(0,1, col = 'grey60')
# Plot Residuals
plot(x$residuals, pch = 19, ylab = 'Residuals')
abline(h = 0, lwd = 2, lty = 2, col = 'grey60')
}
filelist = list.files('Data', pattern = '*.csv')
filenames = gsub('.csv', '', list.files('Data', pattern = '*.csv'))
read.data = function(filename){
temp = read.csv(paste0('Data/',filename)) %>%
gather(Year, Value, -row, -col)
temp$Year = gsub('X','',temp$Year)
colnames(temp)[4] = gsub('.csv', '',filename)
temp
}
read.data = function(filename){
temp = read.csv(paste0('Data/',filename)) %>%
gather(Year, Value, -row, -col) %>%
head(10)
temp$Year = gsub('X','',temp$Year)
colnames(temp)[4] = gsub('.csv', '',filename)
temp
}
x = lapply(filelist, read.data)
head(x)
x = lapply(filelist, function(x) read.data(x))
x
x = read.data(filelist[1])
filelist
filelist = list.files('Data', pattern = '*.csv')
filelist
df = data.frame(percent = c(23,19,6,42),
scenario = c('Base case', 'Scenario 1', 'Scenario 2', 'Scenario 3')
)
library(ggplot2)
df = data.frame(percent = c(23,19,6,42),
scenario = c('Base case', 'Scenario 1', 'Scenario 2', 'Scenario 3')
)
library(ggplot2)
ggplot(df, aes(scenario, percent)) +
geom_bar(stat = "identity")
df = data.frame(percent = c(23,19,6,42),
scenario = c('Base case', 'Scenario 1', 'Scenario 2', 'Scenario 3')
)
library(ggplot2)
ggplot(df, aes(scenario, percent)) +  geom_bar(stat = "identity") +
theme_bw() + labs(x = '', y = 'Percent of weeks exceeded (%)',
title = 'Percentage of weeks where the environmental baseflow is exceeded') +
ggplot(df, aes(scenario, percent)) +  geom_bar(stat = "identity") +
theme_bw() + labs(x = '', y = 'Percent of weeks exceeded (%)',
title = 'Percentage of weeks where the environmental baseflow is exceeded')
ggplot(df, aes(scenario, percent)) +  geom_bar(stat = "identity") +
theme_bw()
df = data.frame(percent = c(23,19,6,42),
scenario = c('Base case', 'Scenario 1', 'Scenario 2', 'Scenario 3')
)
library(ggplot2)
ggplot(df, aes(scenario, percent)) +  geom_bar(stat = "identity") +
labs(x = '', y = 'Percent of weeks exceeded (%)',
title = 'Percentage of weeks where the environmental baseflow is exceeded') +
ggplot(df, aes(scenario, percent)) +  geom_bar(stat = "identity") +
labs(x = '', y = 'Percent of weeks exceeded (%)',
title = 'Percentage of weeks where the environmental baseflow is exceeded')
library(ggplot2)
ggplot(df, aes(scenario, percent)) +  geom_bar(stat = "identity") +
labs(x = '', y = 'Percent of weeks exceeded (%)')
ggplot(df, aes(scenario, percent)) +  geom_bar(stat = "identity") +
labs( title = 'Percentage of weeks where the environmental baseflow is exceeded',
x = '', y = 'Percent of weeks exceeded (%)') + theme_bw()
ggplot(df, aes(scenario, percent)) +  geom_bar(stat = "identity", colour = 'navy') +
labs( title = 'Percentage of weeks where the environmental baseflow is exceeded',
x = '', y = 'Percent of weeks exceeded (%)') + theme_bw()
ggplot(df, aes(scenario, percent)) +  geom_bar(stat = "identity", fill = 'navy') +
labs( title = 'Percentage of weeks where the environmental baseflow is exceeded',
x = '', y = 'Percent of weeks exceeded (%)') + theme_bw()
ggplot(df, aes(scenario, percent)) +  geom_bar(stat = "identity", fill = 'navy') +
labs( title = 'Percentage of weeks where the \n environmental baseflow is exceeded',
x = '', y = 'Percent of weeks exceeded (%)') + theme_bw()
getwd()
df = data.frame(percent = c(23,19,6,42),
scenario = c('Base case', 'Scenario 1', 'Scenario 2', 'Scenario 3')
)
library(ggplot2)
ggplot(df, aes(scenario, percent)) +  geom_bar(stat = "identity", fill = 'black') +
labs( title = 'Percentage of weeks where the \n environmental baseflow is exceeded',
x = '', y = 'Percent of weeks exceeded (%)') + theme_bw()
ggplot(df, aes(scenario, percent)) +  geom_bar(stat = "identity", fill = 'navy', col = 'black') +
labs( title = 'Percentage of weeks where the \n environmental baseflow is exceeded',
x = '', y = 'Percent of weeks exceeded (%)') + theme_bw()
ggplot(df, aes(scenario, percent)) +  geom_bar(stat = "identity", fill = 'navy', col = 'black', lwd = 2) +
labs( title = 'Percentage of weeks where the \n environmental baseflow is exceeded',
x = '', y = 'Percent of weeks exceeded (%)') + theme_bw()
ggplot(df, aes(scenario, percent)) +  geom_bar(stat = "identity", fill = 'navy', col = 'black', lwd = 1.5) +
labs( title = 'Percentage of weeks where the \n environmental baseflow is exceeded',
x = '', y = 'Percent of weeks exceeded (%)') + theme_bw()
ggplot(df, aes(scenario, percent)) +  geom_bar(stat = "identity", fill = 'navy', col = 'black', lwd = 1.2) +
labs( title = 'Percentage of weeks where the \n environmental baseflow is exceeded',
x = '', y = 'Percent of weeks exceeded (%)') + theme_bw()
df = data.frame(percent = c(23,19,6,42),
scenario = c('Base case', 'Scenario 1', 'Scenario 2', 'Scenario 3')
)
library(ggplot2)
ggplot(df, aes(scenario, percent)) +  geom_bar(stat = "identity", fill = 'navy', col = 'black') +
labs( title = 'Percentage of weeks where the \n environmental baseflow is exceeded',
x = '', y = 'Percent of weeks exceeded (%)') + theme_bw()
?datatable
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
############################
rm(list=ls())
#########################
### Read in Functions ###
#########################
source('aws_functions.R')
# mergeT() - compares T (min/max/mean) for two sites using elevation
# mergeP() - compares P (rain/snow/total) for two sites
# annual.temp() - summarizes T data + shows # of missing days
# annual.precip() - summarizes P data + missing days
# read.aws.data() - reads AWS data, replaces 'trace' precip w/ 0.1 mm, allows 'estimated'
# fill.T() - uses first dataset T data to fill 2nd dataset NAs using linear regression
# fill.T() - same but for P; can choose direct replacement (instead of linear reg.)
missing.data = function(x){x[which(!complete.cases(x)),]}
?pbinom
pbinom(0.45, 45, 0.6)
pbinom(0.45, 45, 0.45)
rm(list=ls())
library('shiny')
runGitHub('ModelBuilder1.0', 'mchernos', subdir = 'ModelBuilder')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
getwd()
runGit
?runGit
?runGitHub
??runGitHub
library('shiny')
runGitHub('ModelBuilder1.0', 'mchernos')
install.packages('rmarkdown')
The **rmarkdown** package is licensed under the GPLv3 (<http://www.gnu.org/licenses/gpl.html>).
The **rmarkdown** package is licensed under the GPLv3 (<http://www.gnu.org/licenses/gpl.html>).
?runGitHub
library(shiny)
?runGitHub
library('shiny')
runGitHub('ModelBuilder1.0','mchernos', subdir = '/ModelBuilder')
file.path('Model', 'Data')
?list.files
list.files('.', pattern = '*.csv')
list.files('.', pattern = '*.')
list.files('.', pattern = '*.', recursive = T)
library('shiny')
runGitHub('ModelBuilder1.0','mchernos')
library('shiny')
runGitHub('ModelBuilder1.0','mchernos')
head(data)
head(data)
library('shiny')
runGitHub('ModelBuilder1.0','mchernos')
runGitHub('ModelBuilder1.0','mchernos', subdir = 'ModelBuilder')
runGitHub('ModelBuilder1.0','mchernos', subdir = '\ModelBuilder')
runGitHub('ModelBuilder1.0','mchernos', subdir = '/ModelBuilder')
library('shiny')
runGitHub('ModelBuilder1.0','mchernos', subdir = '/ModelBuilder')
runGitHub('ModelBuilder1.0','mchernos', subdir = 'ModelBuilder')
runGitHub('ModelBuilder1.0','mchernos')
runGitHub('ModelBuilder1.0','mchernos', subdir = 'ModelBuilder')
runUrl("https://github.com/mchernos/ModelBuilder1.0/archive/master.tar.gz")
runUrl("https://github.com/mchernos/ModelBuilder1.0/archive/master.tar.gz", subdir = 'ModelBuilder')
library('shiny')
runGitHub('ModelBuilder1.0','mchernos', subdir = '/ModelBuilder')
getwd()
library('shiny')
runGitHub('ModelBuilder1.0','mchernos')
library('shiny')
runGitHub('ModelBuilder1.0','mchernos', subdir = '/ModelBuilder')
library('shiny')
runGitHub('ModelBuilder1.0','mchernos', subdir = '/ModelBuilder')
getwd()
setwd("~/Dropbox (Personal)")
setwd("~/Dropbox (Personal)/Hydrology Consulting Work/Alces Statistics/ModelBuilder1.0")
runApp('ModelBuilder')
source(file.path('ModelBuilder', 'helper.R'))
runApp('ModelBuilder')
source(file.path('ModelBuilder', 'denscomp1.R'))
getwd()
?runApp
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source(file.path('ModelBuilder', 'helper.R'))
runApp('ModelBuilder')
%Using this version will not allow you to select a different dataset, and ModelBuilder will only run the demo data currently in the `Data` folder.
source(file.path('ModelBuilder', 'helper.R'))
runApp('ModelBuilder')
filelist = list.files(file.path('ModelBuilder','Data'), pattern = '*.csv')
rm(list = ls())
packages = c('shiny', 'dplyr', 'tidyr','corrplot', 'DT',
'MASS', 'ggplot2', 'Kendall', 'fitdistrplus',
'e1071', 'relaimpo', 'mgcv', 'rmarkdown')
x = lapply(packages, function(x){if (!require(x, character.only = T)) install.packages(x)})
x = lapply(packages, require, character.only = T)
rm(x, packages)
source(file.path('ModelBuilder', 'denscomp1.R'))
# source('fitfuncs.R') # Fit Functions
source(file.path('ModelBuilder', 'fitfuncs.R'))
filelist = list.files(file.path('ModelBuilder','Data'), pattern = '*.csv')
filelist
library('shiny')
runApp('ModelBuilder')
runApp('ModelBuilder')
