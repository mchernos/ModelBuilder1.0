else{y~x})
data %>%
filter(`Road Density` > 0) %>%
ggplot(aes(y = `Fish Habitat`, x = `Road Density`)) +
geom_point() +
# labs(y = input$predictand, x = input$x_variable) +
theme_bw() +   stat_smooth(method="gam", family="binomial")
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
data %>%
filter(`Road Density` > 0) %>%
ggplot(aes(y = `Fish Habitat`, x = `Road Density`)) +
geom_point() +
# labs(y = input$predictand, x = input$x_variable) +
theme_bw() +   stat_smooth(method="gam", family=binomial )
?stat_smooth
data %>%
filter(`Road Density` > 0) %>%
ggplot(aes(y = `Fish Habitat`, x = `Road Density`)) +
geom_point() +
# labs(y = input$predictand, x = input$x_variable) +
theme_bw() +   stat_smooth(method="gam", method.args = list(family=binomial ))
data %>%
filter(`Road Density` > 0) %>%
ggplot(aes(y = `Fish Habitat`, x = `Road Density`)) +
geom_point() +
# labs(y = input$predictand, x = input$x_variable) +
theme_bw() +   stat_smooth(method="gam", method.args = list(family=tw ))
data %>%
filter(`Road Density` > 0) %>%
ggplot(aes(y = `Fish Habitat`, x = `Road Density`)) +
geom_point() +
# labs(y = input$predictand, x = input$x_variable) +
theme_bw() +   stat_smooth(method="gam", method.args = list(family='tw' ))
data %>%
filter(`Road Density` > 0) %>%
ggplot(aes(y = `Fish Habitat`, x = `Road Density`)) +
geom_point() +
# labs(y = input$predictand, x = input$x_variable) +
theme_bw() +   stat_smooth(method="gam", method.args = list(family='binomial' ))
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
data %>%
filter(`Road Density` > 0) %>%
ggplot(aes(y = `Fish Habitat`, x = `Road Density`)) +
geom_point() +
# labs(y = input$predictand, x = input$x_variable) +
theme_bw() +   stat_smooth(method="gam", method.args = list(NULL ))
data %>%
filter(`Road Density` > 0) %>%
ggplot(aes(y = `Fish Habitat`, x = `Road Density`)) +
geom_point() +
# labs(y = input$predictand, x = input$x_variable) +
theme_bw() +   stat_smooth(method="lm", method.args = list(NULL ))
data %>%
filter(`Road Density` > 0) %>%
ggplot(aes(y = `Fish Habitat`, x = `Road Density`)) +
geom_point() +
# labs(y = input$predictand, x = input$x_variable) +
theme_bw() +   stat_smooth(method="loess", method.args = list(NULL ))
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
x = fitdist(data[,'Fish Habitat'], 'normal')
x = fitdist(data[,'Fish Habitat'], 'norm')
x = fitdist(data[,'Fish Habitat'], 'norm')
x
denscomp(x, prob = F)
denscomp(x, prob = F, breaks = 10)
denscomp(x, prob = F, breaks = 100)
?denscomp
denscomp(x, prob = F, para = list(breaks = 100))
denscomp(x, prob = F, parameter = list(breaks = 100))
?denscomp
denscomp(x, prob = F, breaks = 100)
denscomp(x, prob = F, break = 100)
denscomp(x, prob = F, breaks = 'default')
denscomp(x, prob = F, nbreaks = 'default')
denscomp(x, prob = F, n.breaks = 10)
denscomp(x, prob = F, n.breaks = 100)
denscomp(x, prob = F, breaks = 100)
?hist
denscomp(x, prob = F, breaks = 'Sturges')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
head(data)
princomp(data[,'Fish Habitat'])
x = princomp(~. , data = data )
x = princomp(~. , data = data , cor = TRUE)
head(data)
x = princomp( ~. , data = data , cor = TRUE)
x = princomp( ~ ., data = data , cor = TRUE)
x = princomp( .~, data = data , cor = TRUE)
princomp(~ ., data = data, cor = TRUE)
fit = lm(~., data = data)
princomp(data[,'Fish Habitat'~ ., data = data, cor = TRUE)
princomp(data[,'Fish Habitat']~ ., data = data, cor = TRUE)
princomp(.~data[,'Fish Habitat'], data = data, cor = TRUE)
princomp(.~data[,'Fish Habitat'], data = data[,-c('Fish Habitat')], cor = TRUE)
princomp(.~data[,'Fish Habitat'], data = data[,-'Fish Habitat'], cor = TRUE)
princomp(.~data[,'Fish Habitat'], data = data[,-2], cor = TRUE)
princomp(.~data[,'Fish Habitat'], data = data[,-2], cor = TRUE)
head(data)
princomp(.~data[,'Fish Habitat'], data = data[,-4], cor = TRUE)
princomp(data[,'Fish Habitat']~., data = data[,-4], cor = TRUE)
princomp(~ row + col + Year)
princomp(~ row + col + Year, data = data)
x = princomp(~ row + col + Year, data = data)
plot(x)
x
summary9x
summary(x)
x = princomp(~., data = data)
fit <- princomp(mydata, cor=TRUE)
fit <- princomp(data, cor=TRUE)
fit
summary(fit)
plot(fit)
plot(fit, names = colnames(data))
plot(fit, labels = colnames(data))
plot(fit, type = 'l')
plot(fit, type = 'l', breaks = 1:7, labels = names(data))
plot(fit, type = 'l', breaks = 1:7)
plot(fit, type = 'l', labels = 1:7)
plot(fit, type = 'l', label = 1:7)
fit
summary(fit)
fit$scores
loadings(fit)
prcomp()
?prcomp
fit <- princomp(data, cor=TRUE)
fit2 = prcomp(data)
ffit
fit2
fit
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
fit <- princomp(data, cor=TRUE)
fit
summary(fit)
fit2 = prcomp(data)
summary(fit2)
fit2
plot(fit2)
plot(fit2, type = 'l')
fit2
?prcomp
prcomp(.~data$Year, data = data)
prcomp(data$Year~., data = data)
lapply(class, data)
lapply(data, class)
prcomp(Year~col + row, data = data)
prcomp(Year~`Fish Habitat` + `Road Density`, data = data)
colnames(data)
prcomp(row~col, data )
prcomp(data[,3]~data[,4], data[,3:6])
prcomp(data[,3]~data[,4], data[,5:6])
prcomp(~data[,3])
prcomp(~data[,3], data = data)
prcomp(.~data[,3], data = data)
prcomp(data[,3]~., data = data)
prcomp(data[,3]~, data = data)
prcomp(data[,3] , data = data)
prcomp(data[,-1])
prcomp(data[,-1], scale = T)
prcomp(~Year + `Fish Habitat` + `Road Density`, data)
prcomp(~Year + `Fish Habitat` + `Road Density`, data = data)
prcomp(~`Fish Habitat` + `Road Density`, data = data)
fit
biplot(fit)
ffit
fit2
par(mfrow = c(2,1))
biplot(fit2)
fit2
summary(fit2)
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
fitdist(data[,3])
fitdist(data[,3], 'norm')
x = fitdist(data[,3], 'norm')
hist(x)
hist(data[,3])
denscomp
denscomp1 = function (ft, xlim, ylim, probability = TRUE, main, xlab, ylab,
datapch, datacol, fitlty, fitcol, addlegend = TRUE, legendtext,
xlegend = "topright", ylegend = NULL, demp = FALSE, dempcol = "grey",
...)
{
if (inherits(ft, "fitdist")) {
ft <- list(ft)
}
else if (!is.list(ft)) {
stop("argument ft must be a list of 'fitdist' objects")
}
else {
if (any(sapply(ft, function(x) !inherits(x, "fitdist"))))
stop("argument ft must be a list of 'fitdist' objects")
}
if (!is.null(ft[[1]]$weights))
stop("denscomp is not yet available when using weights")
nft <- length(ft)
if (missing(datapch))
datapch <- 16
if (missing(datacol))
datacol <- NULL
if (missing(fitcol))
fitcol <- 2:(nft + 1)
if (missing(fitlty))
fitlty <- 1:nft
fitcol <- rep(fitcol, length.out = nft)
fitlty <- rep(fitlty, length.out = nft)
if (missing(xlab))
xlab <- "data"
if (missing(ylab))
ylab <- ifelse(probability, "Density", "Frequency")
if (missing(main))
main <- ifelse(probability, "Histogram and theoretical densities",
"Histogram and theoretical frequencies")
mydata <- ft[[1]]$data
if (missing(xlim)) {
xmin <- min(mydata)
xmax <- max(mydata)
xlim <- range(mydata)
}
else {
xmin <- xlim[1]
xmax <- xlim[2]
}
verif.ftidata <- function(fti) {
if (any(fti$data != mydata))
stop("All compared fits must have been obtained with the same dataset")
invisible()
}
lapply(ft, verif.ftidata)
n <- length(mydata)
sfin <- seq(xmin, xmax, length.out = 101)
reshist <- hist(mydata, plot = FALSE)
scalefactor <- ifelse(probability, 1, n * diff(reshist$breaks))
comput.fti <- function(i, ...) {
fti <- ft[[i]]
para <- c(as.list(fti$estimate), as.list(fti$fix.arg))
distname <- fti$distname
ddistname <- paste("d", distname, sep = "")
do.call(ddistname, c(list(x = sfin), as.list(para))) *
scalefactor
}
fitteddens <- sapply(1:nft, comput.fti, ...)
if (NCOL(fitteddens) != nft || NROW(fitteddens) != length(sfin))
stop("problem when computing fitted densities.")
if (missing(ylim)) {
if (!probability)
ylim <- c(0, max(reshist$counts))
else ylim <- c(0, max(reshist$density))
ylim <- range(ylim, fitteddens)
}
else ylim <- range(ylim)
reshist <- hist(mydata, breaks = breaks, main = main, xlab = xlab, ylab = ylab,
xlim = xlim, ylim = ylim, col = datacol, probability = probability,
...)
for (i in 1:nft) lines(sfin, fitteddens[, i], lty = fitlty[i],
col = fitcol[i], ...)
if (demp)
lines(density(mydata)$x, density(mydata)$y * scalefactor,
col = dempcol)
if (addlegend) {
if (missing(legendtext) && !demp) {
legendtext <- paste("fit", 1:nft)
}
else if (missing(legendtext) && demp) {
legendtext <- c(paste("fit", 1:nft), "emp.")
fitlty <- c(fitlty, 1)
fitcol <- c(fitcol, dempcol)
}
else if (demp) {
legendtext <- c(legendtext, "emp.")
fitlty <- c(fitlty, 1)
fitcol <- c(fitcol, dempcol)
}
legend(x = xlegend, y = ylegend, bty = "n", legend = legendtext,
lty = fitlty, col = fitcol, ...)
}
}
denscomp1(x)
denscomp1 = function (ft, breaks = 10, xlim, ylim, probability = TRUE, main, xlab, ylab,
datapch, datacol, fitlty, fitcol, addlegend = TRUE, legendtext,
xlegend = "topright", ylegend = NULL, demp = FALSE, dempcol = "grey",
...)
{
if (inherits(ft, "fitdist")) {
ft <- list(ft)
}
else if (!is.list(ft)) {
stop("argument ft must be a list of 'fitdist' objects")
}
else {
if (any(sapply(ft, function(x) !inherits(x, "fitdist"))))
stop("argument ft must be a list of 'fitdist' objects")
}
if (!is.null(ft[[1]]$weights))
stop("denscomp is not yet available when using weights")
nft <- length(ft)
if (missing(datapch))
datapch <- 16
if (missing(datacol))
datacol <- NULL
if (missing(fitcol))
fitcol <- 2:(nft + 1)
if (missing(fitlty))
fitlty <- 1:nft
fitcol <- rep(fitcol, length.out = nft)
fitlty <- rep(fitlty, length.out = nft)
if (missing(xlab))
xlab <- "data"
if (missing(ylab))
ylab <- ifelse(probability, "Density", "Frequency")
if (missing(main))
main <- ifelse(probability, "Histogram and theoretical densities",
"Histogram and theoretical frequencies")
mydata <- ft[[1]]$data
if (missing(xlim)) {
xmin <- min(mydata)
xmax <- max(mydata)
xlim <- range(mydata)
}
else {
xmin <- xlim[1]
xmax <- xlim[2]
}
verif.ftidata <- function(fti) {
if (any(fti$data != mydata))
stop("All compared fits must have been obtained with the same dataset")
invisible()
}
lapply(ft, verif.ftidata)
n <- length(mydata)
sfin <- seq(xmin, xmax, length.out = 101)
reshist <- hist(mydata, plot = FALSE)
scalefactor <- ifelse(probability, 1, n * diff(reshist$breaks))
comput.fti <- function(i, ...) {
fti <- ft[[i]]
para <- c(as.list(fti$estimate), as.list(fti$fix.arg))
distname <- fti$distname
ddistname <- paste("d", distname, sep = "")
do.call(ddistname, c(list(x = sfin), as.list(para))) *
scalefactor
}
fitteddens <- sapply(1:nft, comput.fti, ...)
if (NCOL(fitteddens) != nft || NROW(fitteddens) != length(sfin))
stop("problem when computing fitted densities.")
if (missing(ylim)) {
if (!probability)
ylim <- c(0, max(reshist$counts))
else ylim <- c(0, max(reshist$density))
ylim <- range(ylim, fitteddens)
}
else ylim <- range(ylim)
reshist <- hist(mydata, breaks = breaks, main = main, xlab = xlab, ylab = ylab,
xlim = xlim, ylim = ylim, col = datacol, probability = probability,
...)
for (i in 1:nft) lines(sfin, fitteddens[, i], lty = fitlty[i],
col = fitcol[i], ...)
if (demp)
lines(density(mydata)$x, density(mydata)$y * scalefactor,
col = dempcol)
if (addlegend) {
if (missing(legendtext) && !demp) {
legendtext <- paste("fit", 1:nft)
}
else if (missing(legendtext) && demp) {
legendtext <- c(paste("fit", 1:nft), "emp.")
fitlty <- c(fitlty, 1)
fitcol <- c(fitcol, dempcol)
}
else if (demp) {
legendtext <- c(legendtext, "emp.")
fitlty <- c(fitlty, 1)
fitcol <- c(fitcol, dempcol)
}
legend(x = xlegend, y = ylegend, bty = "n", legend = legendtext,
lty = fitlty, col = fitcol, ...)
}
}
denscomp1(x)
denscomp1(x, breaks = 20)
denscomp1(x, breaks = 50)
denscomp1(x, breaks = 500)
denscomp1(x, breaks = 2)
denscomp1(x, breaks = 3)
denscomp1(x, breaks = 5)
denscomp1(x, breaks = 6)
source('denscomp1.R')
source('ModelBuilder/denscomp1.R')
denscomp1(x, breaks = 'Sturges')
denscomp1(x, breaks = '')
denscomp1(x, breaks = 'fd')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
head(data)
ggplot(data, aes(Year, `Fish Habitat`)) + geom_line()
ggplot(data, aes(Year, `Fish Habitat`)) + geom_point()
x = ggplot(data, aes(Year, `Fish Habitat`)) + geom_point()
ggsave(x)
ggsave(x, .png)
ggsave(x, '.png')
?ggsave
ggsave('temp', x, device = '.pdf')
ggsave('temp', x, device = '.png')
ggsave('temp', x)
ggsave('temp', x, 'pdf')
ggsave('temp.pdf', x, 'pdf', width = 5, height = 5)
ggsave('temp2.pdf', x, 'pdf', width = 5, height = 5)
ggsave('temp2', x, 'pdf', width = 5, height = 5)
ggsave('temp2', x, 'pdf')
plot(rnorm(10), rnorm(10))
x = plot(rnorm(10), rnorm(10))
x
plot(x)
x
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
corrplot(cor(data), method = "ellipse", order = 'AOE')
x = corrplot(cor(data), method = "ellipse", order = 'AOE')
x
ggsave('cor', x, device = 'pdf')
ggsave('cor', corrplot(cor_matrix(), method = "ellipse", order = 'AOE'), device = 'pdf')
ggsave('cor', corrplot(cor(data), method = "ellipse", order = 'AOE'), device = 'pdf')
pdf("plot.pdf", width=5, height=5)
plot(rnorm(sample(100:1000,1)))
dev.off()
pdf("plot.pdf", width=5, height=5)
plot(corrplot(cor(data)))
dev.off()
pdf("plot.pdf", width=5, height=5)
plot(corrplot(cor(data)))
dev.off()
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
x = fitdist(data[,4])
x = fitdist(data[,4], 'norm')
x
plot(x)
denscomp(x)
denscomp(x)
denscomp(x)
?denscomp
denscomp(x, xlegend = 'top')
denscomp(x, xlegend = 'bottom')
denscomp(x, xlegend = 'outside')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
fitdist(data[,3])
fitdist(data[,3], 'norm')
x = fitdist(data[,3], 'norm')
plot(x)
denscomp(x, xlegend = 'none')
denscomp(x, xlegend = 'top')
denscomp(x, xlegend = NULL)
denscomp(x)
denscomp(x, xlegend = F)
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
