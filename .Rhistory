source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
shiny::runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
shiny::runApp('ModelBuilder')
shiny::runApp('ModelBuilder')
shiny::runApp('ModelBuilder')
shiny::runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
shiny::runApp('ModelBuilder')
regionalized
shiny::runApp('ModelBuilder')
?renderUI
if(regionalized){
}
regionalized
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
head(data)
unique(data$name)
unique(data$name)
c('All', unique(data$name)
c('All', unique(data$name))
c('All', unique(data$name))
c('All', as.character(unique(data$name)))
shiny::runApp('ModelBuilder')
head(data)
regionalized
data = data %>%
gather(Stat, Value, -name, -Year) %>%
group_by(Year, Stat)
head(data)
data %>%
summarise(Value = median(Value, na.rm = T)) %>%
spread(key = Stat, value = Value)
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
head(data)
data %>%
ggplot(aes(x = name, y = Dummy)) +
geom_boxplot()
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
regionalized
p = ggplot(data, aes(x = name, y = Dummy))
p + geom_point()
p = ggplot(data, aes(x = name, y = Dummy))
if(regionalized) {p + geom_boxplot()}
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
get('x')
shiny::runApp('ModelBuilder')
sites = unique(data$name)
sites
xdat = filter(name %in% sites[1:3])
xdat = filter(data, name %in% sites[1:3])
head(xdat)
t.test()
?t.test
tapply()
?tapply
tapply(xdat$Dummy, xdat$name, t.test)
?anova
tapply(xdat$Dummy, xdat$name, t.test)
aov(name~Dummy, data = xdat)
fit <- aov(Dummy ~ name, data=mydataframe)
fit <- aov(Dummy ~ name, data=xdat)
fit
?TukeyHSD
TukeyHSD(fit)
summary(fit)
shiny::runApp('ModelBuilder')
shiny::runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
runGitHub('ModelBuilder1.0','mchernos')
runGitHub('ModelBuilder1.0','mchernos')
?runGitHub
shiny::runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
head(data)
newdat = filter(data, Year == 2010)
head(newdat)
fit = lm(`Beaver Dams`~. data = newdat)
fit = lm(`Beaver Dams`~. , data = newdat)
fit
step = stepAIC(fit, scope = list(upper = fit, lower = ~1),
direction="both", steps = 1000, trace = F)
step = stepAIC(fit, scope = list(upper = fit, lower = ~1),
steps = 1000, trace = F)
step = stepAIC(fit, scope = list(upper = fit, lower = ~1),
direction="both", steps = 10, trace = F)
step(fit)
View(newdat)
fit = lm(`Beaver Dams`~1 , data = newdat)
step = stepAIC(fit, scope = list(upper = fit, lower = ~1),
direction="forward", steps = 1000, trace = F)
step
step = stepAIC(fit,
direction="forward", steps = 1000, trace = F)
step
step = stepAIC(fit,
direction="backward", steps = 1000, trace = F)
return(step)
step
step = stepAIC(fit, scope = list(upper = fit, lower = ~1),
direction="both", steps = 1000, trace = F)
step
step = stepAIC(fit, scope = list(lower = fit, upper = ~1),
direction="both", steps = 1000, trace = F)
step
fit = lm(`Beaver Dams`~. , data = newdat)
fit
fit = lm(`Beaver Dams`~. , data = newdat[,-1])
head(newdat)
fit = lm(`Beaver Dams`~. , data = newdat[,-1])
newdat[,-1]
newdat[,-1:-2]
fit = lm(`Beaver Dams`~. , data = newdat[,-1:-2])
fit
x = lm(`Beaver Dams`~`Stream Discontinuity`, data = newdat[,-1:-2])
x
plot(x)
step = stepAIC(fit, scope = list(upper = fit, lower = ~1),
direction="both", steps = 1000, trace = F)
fit
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
head(data)
tail(data)
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
filelist
head(read.data(filelist[2]))
head(read.data(filelist[3]))
head(read.data(filelist[1]))
tail(read.data(filelist[1]))
data = lapply(filelist, function(x) read.data(x)) %>%
Reduce(function(x,y) full_join(x,y, by = non_data_cols), .)
head(data)
data[complete.cases(data),]
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Alces Correlations to Riparian Health
# Clean up workspace
rm(list = ls())
# Check for installed packages (install if need be)
packages = c('shiny', 'dplyr', 'tidyr','corrplot', 'DT',
'MASS', 'ggplot2', 'Kendall', 'fitdistrplus',
'e1071', 'relaimpo', 'mgcv')
x = lapply(packages, function(x){if (!require(x, character.only = T)) install.packages(x)})
x = lapply(packages, require, character.only = T)
rm(x, packages)
############ LOAD FUNCTIONS ###################
source('ModelBuilder/denscomp1.R') # Density histogram plot for interactive breaks
source('ModelBuilder/fitfuncs.R') # Fit Functions
####################
# Read in the Data #
####################
filelist = list.files('ModelBuilder/Data', pattern = '*.csv')
# Function to read in the Data
read.data = function(filename){
temp = read.csv(paste0('ModelBuilder/Data/',filename))
if(colnames(temp)[1] == 'name'){
temp = gather(temp, Year, Value, -name)
}else {
temp = gather(temp, Year, Value, -row, -col)
}
temp$Year = gsub('X','',temp$Year)
colnames(temp)[length(temp)] = gsub('.csv', '',filename)
temp
}
# Need to use as template for reading in all the rest of 'em
temp = read.csv(paste0('ModelBuilder/Data/',filelist[1]))
regionalized = (colnames(temp)[1] == 'name')
if(regionalized){   non_data_cols = c('name', 'Year')
}else {           non_data_cols = c('row', 'col', 'Year') }
# Read in and merge all datasets, Conditional on if data are regionalized
data = lapply(filelist, function(x) read.data(x)) %>%
Reduce(function(x,y) full_join(x,y, by = non_data_cols), .)
if(!regionalized){ data = data %>% sample_n(2500) }
data$Year = as.numeric(data$Year)
rm(temp)
# END HELPER #
head(data)
# Alces Correlations to Riparian Health
# Clean up workspace
rm(list = ls())
# Check for installed packages (install if need be)
packages = c('shiny', 'dplyr', 'tidyr','corrplot', 'DT',
'MASS', 'ggplot2', 'Kendall', 'fitdistrplus',
'e1071', 'relaimpo', 'mgcv')
x = lapply(packages, function(x){if (!require(x, character.only = T)) install.packages(x)})
x = lapply(packages, require, character.only = T)
rm(x, packages)
############ LOAD FUNCTIONS ###################
source('ModelBuilder/denscomp1.R') # Density histogram plot for interactive breaks
source('ModelBuilder/fitfuncs.R') # Fit Functions
####################
# Read in the Data #
####################
filelist = list.files('ModelBuilder/Data', pattern = '*.csv')
# Function to read in the Data
read.data = function(filename){
temp = read.csv(paste0('ModelBuilder/Data/',filename))
if(colnames(temp)[1] == 'name'){
temp = gather(temp, Year, Value, -name)
}else {
temp = gather(temp, Year, Value, -row, -col)
}
temp$Year = gsub('X','',temp$Year)
colnames(temp)[length(temp)] = gsub('.csv', '',filename)
temp
}
# Need to use as template for reading in all the rest of 'em
temp = read.csv(paste0('ModelBuilder/Data/',filelist[1]))
regionalized = (colnames(temp)[1] == 'name')
if(regionalized){   non_data_cols = c('name', 'Year')
}else {           non_data_cols = c('row', 'col', 'Year') }
# Read in and merge all datasets, Conditional on if data are regionalized
data = lapply(filelist, function(x) read.data(x)) %>%
Reduce(function(x,y) full_join(x,y, by = non_data_cols), .)
if(!regionalized){ data = data %>% sample_n(2500) }
data$Year = as.numeric(data$Year)
rm(temp)
# END HELPER #
head(data)
tail(data)
head(data)
unique(data$Year)
# Alces Correlations to Riparian Health
# Clean up workspace
rm(list = ls())
# Check for installed packages (install if need be)
packages = c('shiny', 'dplyr', 'tidyr','corrplot', 'DT',
'MASS', 'ggplot2', 'Kendall', 'fitdistrplus',
'e1071', 'relaimpo', 'mgcv')
x = lapply(packages, function(x){if (!require(x, character.only = T)) install.packages(x)})
x = lapply(packages, require, character.only = T)
rm(x, packages)
############ LOAD FUNCTIONS ###################
source('ModelBuilder/denscomp1.R') # Density histogram plot for interactive breaks
source('ModelBuilder/fitfuncs.R') # Fit Functions
####################
# Read in the Data #
####################
filelist = list.files('ModelBuilder/Data', pattern = '*.csv')
# Function to read in the Data
read.data = function(filename){
temp = read.csv(paste0('ModelBuilder/Data/',filename))
if(colnames(temp)[1] == 'name'){
temp = gather(temp, Year, Value, -name)
}else {
temp = gather(temp, Year, Value, -row, -col)
}
temp$Year = gsub('X','',temp$Year)
colnames(temp)[length(temp)] = gsub('.csv', '',filename)
temp
}
# Need to use as template for reading in all the rest of 'em
temp = read.csv(paste0('ModelBuilder/Data/',filelist[1]))
regionalized = (colnames(temp)[1] == 'name')
if(regionalized){   non_data_cols = c('name', 'Year')
}else {           non_data_cols = c('row', 'col', 'Year') }
# Read in and merge all datasets, Conditional on if data are regionalized
data = lapply(filelist, function(x) read.data(x)) %>%
Reduce(function(x,y) full_join(x,y, by = non_data_cols), .)
if(!regionalized){ data = data %>% sample_n(2500) }
data$Year = as.numeric(data$Year)
rm(temp)
# END HELPER #
head(data)
tail(data)
data = data %>%
gather(Stat, Value, -name, -Year) %>%
group_by(Year, Stat)
head(data)
head(data.frame(data))
# Alces Correlations to Riparian Health
# Clean up workspace
rm(list = ls())
# Check for installed packages (install if need be)
packages = c('shiny', 'dplyr', 'tidyr','corrplot', 'DT',
'MASS', 'ggplot2', 'Kendall', 'fitdistrplus',
'e1071', 'relaimpo', 'mgcv')
x = lapply(packages, function(x){if (!require(x, character.only = T)) install.packages(x)})
x = lapply(packages, require, character.only = T)
rm(x, packages)
############ LOAD FUNCTIONS ###################
source('ModelBuilder/denscomp1.R') # Density histogram plot for interactive breaks
source('ModelBuilder/fitfuncs.R') # Fit Functions
####################
# Read in the Data #
####################
filelist = list.files('ModelBuilder/Data', pattern = '*.csv')
# Function to read in the Data
read.data = function(filename){
temp = read.csv(paste0('ModelBuilder/Data/',filename))
if(colnames(temp)[1] == 'name'){
temp = gather(temp, Year, Value, -name)
}else {
temp = gather(temp, Year, Value, -row, -col)
}
temp$Year = gsub('X','',temp$Year)
colnames(temp)[length(temp)] = gsub('.csv', '',filename)
temp
}
# Need to use as template for reading in all the rest of 'em
temp = read.csv(paste0('ModelBuilder/Data/',filelist[1]))
regionalized = (colnames(temp)[1] == 'name')
if(regionalized){   non_data_cols = c('name', 'Year')
}else {           non_data_cols = c('row', 'col', 'Year') }
# Read in and merge all datasets, Conditional on if data are regionalized
data = lapply(filelist, function(x) read.data(x)) %>%
Reduce(function(x,y) full_join(x,y, by = non_data_cols), .)
if(!regionalized){ data = data %>% sample_n(2500) }
data$Year = as.numeric(data$Year)
rm(temp)
# END HELPER #
head(data)
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
head(data)
tail(data)
head(filter(data, Year %in% 1900:2060))
head(filter(data, `Energy Mines` >=0 & `Energy Mines` <= 10000))
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
head(data)
input$predictand = 'Energy Mines'
input = data.frame()
input$predictand = 'Energy Mines'
max(data)
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
?selectizeInput
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
?actionButton
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
file.path('ModelBuilder', 'helper.R')
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source(file.path('ModelBuilder', 'helper.R'))
runApp('ModelBuilder')
rm(list = ls())
# Check for installed packages (install if need be)
packages = c('shiny', 'dplyr', 'tidyr','corrplot', 'DT',
'MASS', 'ggplot2', 'Kendall', 'fitdistrplus',
'e1071', 'relaimpo', 'mgcv')
x = lapply(packages, function(x){if (!require(x, character.only = T)) install.packages(x)})
x = lapply(packages, require, character.only = T)
rm(x, packages)
source(file.path('ModelBuilder', 'denscomp1.R'))
# source('ModelBuilder/fitfuncs.R') # Fit Functions
source(file.path('ModelBuilder', 'fitfuncs.R'))
filelist = list.files(file.path('ModelBuilder','Data'), pattern = '*.csv')
filelist
filename[1]
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source(file.path('ModelBuilder', 'helper.R'))
runApp('ModelBuilder')
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source(file.path('ModelBuilder', 'helper.R'))
runApp('ModelBuilder')
runGitHub('ModelBuilder1.0','mchernos', subdir = '/ModelBuilder')
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source(file.path('ModelBuilder', 'helper.R'))
runApp('ModelBuilder')
