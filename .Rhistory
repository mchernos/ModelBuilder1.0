denscomp(fg, )
?denscomp
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
fw <- fitdist(data$road_density, distr  = "gamma")
fg <- fitdist(data$"fish_habitat", "gamma")
fln <- fitdist(data$"fish_habitat", "lnorm")
plot.legend <- c("Weibull", "lognormal", "gamma")
denscomp(list(fw, fln, fg), legendtext = plot.legend)
cdfcomp(fg)
cdfcomp(fg)
fg <- fitdist(data$"fish_habitat", "pois")
fg <- fitdist(data$road_density, "pois")
Y1 <- 100
set.seed(101) ## for reproducibility
x.pois<-rpois(Y1, 20)
hist(x.pois, breaks=100,freq=FALSE)
lines(density(x.pois, bw=0.8), col="red")
library(MASS)
(my.mle<-fitdistr(x.pois, densfun="poisson"))
BIC(my.mle)
plot(mr.mle)
plot(my.mle)
my.mle
denscomp(my.mle)
(my.mle<-fitdist(x.pois, densfun="poisson"))
(my.mle<-fitdist(x.pois, distr="poisson"))
(my.mle<-fitdist(x.pois, distr="pois"))
x.pois
plot(my.mle)
gofstat(my.mle)
?denscomp
my.mle
hist(my.mle)
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
fitdist(data$"fish_habitat", 'gamma')
fitdist(data$"fish_habitat", 'gamma', breaks = 10)
fitdist(data$"fish_habitat", 'gamma', breaks = 100)
fitdist(data$"fish_habitat", 'gamma', breaks = 20)
fitdist(data$"fish_habitat", 'gamma', breaks = 2)
fitdist(data$"fish_habitat", 'gamma', breaks = 1)
fitdist(data$"fish_habitat", 'gamma')
?fitdist
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
?stat_smooth
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
?selectInput
?rlm
?loess
?gam
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
?lnorm
??lnorm
?nbinom
??nbinom
?mle
?qme
?mge
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
x = data$fish_habitat
shapiro.test(x)
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
head(data)
data$Norman = rnorm(length(data))
data$Norman = rnorm(1000)
head(data)
data$Poisson = rpois(1000)
data$Poisson = rpois(1000,1)
head(data)
write.csv(data, 'data2.csv')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
?mtext
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
sd
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
head(data)
data$road_density = ifelse(data$"road_density" == 0, NA, data$"road_density")
head(data)
fit = lm(road_density~fish_habitat, data = data)
fit.plot(data$"road_density", fit)
predictand = data$road_density
x = fit
plot(predictand, x$fitted.values, pch = 19,
xlab = 'Observed', ylab = 'Predicted',
col = rgb(0,0,0,0.6),
main = '')
length(predictand)
length(x$fitted.values)
?na.omit
?lm
plot(na.omit(predictand), x$fitted.values, pch = 19,
)
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
head(data)
data = data %>%
gather(Stat, Value,  -row, -col, -Year) %>%
group_by(Year, Stat)
head(data)
# Alces Correlations to Riparian Health
rm(list = ls())
library('shiny')
library('dplyr')
library('tidyr')
library('corrplot')                     # package corrplot
library('MASS')
library('Kendall')
library('fitdistrplus')
library('ggplot2')
# Fit Plot FUNCTION
fit.plot = function(predictand, x){
# par(mfrow = c(1,2))
# Plot Predicted Model against Observed Values
plot(na.omit(predictand), x$fitted.values, pch = 19,
xlab = 'Observed', ylab = 'Predicted',
col = rgb(0,0,0,0.6),
main = '')
mtext('Predicted vs. Modelled', 3)
abline(0,1, col = 'red', lwd = 2)
# Plot Residuals
plot(x$residuals, pch = 19, ylab = 'Residuals',
col = rgb(0,0,0,0.6),
main = '')
mtext('Indexed Residuals', 3)
abline(h = 0, lwd = 2, lty = 2, col = 'red')
}
####################
# Read in the Data #
####################
filelist = list.files('Data', pattern = '*.csv')
read.data = function(filename){
temp = read.csv(paste0('Data/',filename)) %>%
gather(Year, Value, -row, -col)
temp$Year = gsub('X','',temp$Year)
colnames(temp)[4] = gsub('.csv', '',filename)
temp
}
# Read in and merge all datasets
# data = lapply(filelist, function(x) read.data(x)) %>%
#   Reduce(function(x,y) full_join(x,y, by = c('row', 'col', 'Year')), .)
# Y = F
#
# data = data %>%
#   filter(Year %in% 1900:1930)
# if (Y){
# data = data %>%
#   gather(Stat, Value,  -row, -col, -Year) %>%
#   group_by(Year, Stat) %>%
#   summarise(Value = mean(Value)) %>%
#   spread(key = Stat, value =Value)
# }
#
#
# X %>%
#   add(1) %>%
#   {if(Y) add(1) else .}
# data = data[sample(nrow(data), 1000), ]
# TEMP DATA
data = read.csv('Data/data2.csv')
# ggplot(aes(x = row, y = col, colour = fish_habitat), data = data) + geom_point()
data$Year = as.numeric(data$Year)
head(data)
data$road_density = ifelse(data$"road_density"==0, NA, data$"road_density")
head(data)
data = data %>%
gather(Stat, Value,  -row, -col, -Year) %>%
group_by(Year, Stat)
data %>%
summarise(Value = mean(Value, na.rm = T)) %>%
spread(key = Stat, value =Value)
data %>%
summarise(Value = median(Value)) %>%
spread(key = Stat, value =Value)
data %>%
summarise(Value = sum(na.omit(Value))) %>%
spread(key = Stat, value =Value)
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
data = data %>%
gather(Stat, Value,  -row, -col, -Year) %>%
group_by(Year, Stat)
data = data %>%
summarise(Value = mean(Value, na.rm = T)) %>%
spread(key = Stat, value =Value)
head(data)
corrplot(cor(data))
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
shiny::runApp('~/Dropbox/Hydrology Consulting Work/Alces Correlations/ModelBuilder1.0/ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
?DATATABLE
datatable
?datatable
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Alces Correlations to Riparian Health
# Clean up workspace
rm(list = ls())
# Check for installed packages (install if need be)
packages = c('shiny', 'dplyr', 'tidyr','corrplot', 'DT',
'MASS', 'ggplot2', 'Kendall', 'fitdistrplus')
x = lapply(packages, function(x){if (!require(x, character.only = T)) install.packages(x)})
x = lapply(packages, require, character.only = T)
rm(x, packages)
# Fit Plot Function
fit.plot = function(predictand, x){
# Plot Predicted Model against Observed Values
plot(na.omit(predictand), x$fitted.values, pch = 19,
xlab = 'Observed', ylab = 'Predicted',
col = rgb(0,0,0,0.6),
main = '')
mtext('Predicted vs. Observed', 3)
abline(0,1, col = 'red', lwd = 2)
# Plot Residuals
plot(x$residuals, pch = 19, ylab = 'Residuals',
col = rgb(0,0,0,0.6),
main = '')
mtext('Indexed Residuals', 3)
abline(h = 0, lwd = 2, lty = 2, col = 'red')
}
####################
# Read in the Data #
####################
filelist = list.files('Data', pattern = '*.csv')
read.data = function(filename){
temp = read.csv(paste0('Data/',filename)) %>%
gather(Year, Value, -row, -col)
temp$Year = gsub('X','',temp$Year)
colnames(temp)[4] = gsub('.csv', '',filename)
temp
}
# Read in and merge all datasets
data = lapply(filelist, function(x) read.data(x)) %>%
Reduce(function(x,y) full_join(x,y, by = c('row', 'col', 'Year')), .)
# data = data[sample(nrow(data), 1000), ]
# TEMP DATA
# data = read.csv('Data/data2.csv')
# ggplot(aes(x = row, y = col, colour = fish_habitat), data = data) + geom_point()
# data$Year = as.numeric(data$Year)
head(data)
# Alces Correlations to Riparian Health
# Clean up workspace
rm(list = ls())
# Check for installed packages (install if need be)
packages = c('shiny', 'dplyr', 'tidyr','corrplot', 'DT',
'MASS', 'ggplot2', 'Kendall', 'fitdistrplus')
x = lapply(packages, function(x){if (!require(x, character.only = T)) install.packages(x)})
x = lapply(packages, require, character.only = T)
rm(x, packages)
# Fit Plot Function
fit.plot = function(predictand, x){
# Plot Predicted Model against Observed Values
plot(na.omit(predictand), x$fitted.values, pch = 19,
xlab = 'Observed', ylab = 'Predicted',
col = rgb(0,0,0,0.6),
main = '')
mtext('Predicted vs. Observed', 3)
abline(0,1, col = 'red', lwd = 2)
# Plot Residuals
plot(x$residuals, pch = 19, ylab = 'Residuals',
col = rgb(0,0,0,0.6),
main = '')
mtext('Indexed Residuals', 3)
abline(h = 0, lwd = 2, lty = 2, col = 'red')
}
####################
# Read in the Data #
####################
filelist = list.files('Data', pattern = '*.csv')
read.data = function(filename){
temp = read.csv(paste0('Data/',filename)) %>%
gather(Year, Value, -row, -col)
temp$Year = gsub('X','',temp$Year)
colnames(temp)[4] = gsub('.csv', '',filename)
temp
}
# Read in and merge all datasets
data = lapply(filelist, function(x) read.data(x)) %>%
Reduce(function(x,y) full_join(x,y, by = c('row', 'col', 'Year')), .)
# data = data[sample(nrow(data), 1000), ]
# TEMP DATA
# data = read.csv('Data/data2.csv')
# ggplot(aes(x = row, y = col, colour = fish_habitat), data = data) + geom_point()
# data$Year = as.numeric(data$Year)
head(data)
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
head(data)
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
min(data$Year)
max = max(data$Year)
max(data$Year
)
max(data)
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Read in and merge all datasets
data = lapply(filelist, function(x) read.data(x)) %>%
Reduce(function(x,y) full_join(x,y, by = c('row', 'col', 'Year')), .) %>%
sample_n(1000)
dim(data)
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
?aov
head(dtaa)
head(data)
aov(fish_habitat~road_density, data = data)
ancova = aov(fish_habitat~road_density, data = data)
summary(ancova)
plot(ancova)
anova(ancova)
ancova$anova
anova(lm(fish_habitat~road_density, data))
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
?Anova
??Anova
?stepAIC
?lm
lm(fish_habitat~road_density, data)
aov(fish_habitat~road_density, data)
summary(aov(fish_habitat~road_density, data))
summarylm(fish_habitat~road_density, data))
summary(lm(fish_habitat~road_density, data))
coef(lm(fish_habitat~road_density, data))
coef(aov(fish_habitat~road_density, data))
install.packages('car')
Anova(aov(fish_habitat~road_density, data))
?Anova
Anova(aov(fish_habitat~road_density, data), type = 'III')
coef(aov(fish_habitat~road_density+ dummy, data))
anova(aov(fish_habitat~road_density+ dummy, data))
Anova(aov(fish_habitat~road_density+ dummy, data))
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
cor(data)
round(cor(data))
round(cor(data),2
)
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
head(data)
x = data$fish_habitat
c(mean(x), sd(x), median(x), max(x), min(x))
mode(x)
?mode
modal(x)
?modal
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
quartile(x)
quantile(x)
median(x)
length(quantile(x))
skew()
?skew
skewness()
?kurtosis
library(e1071)
skewness(x)
kurtosis(x)
stats = c('Mean', 'St. Dev.','Mode','Skewness', 'Kurtosis' )
stats2 = c( 'Min','25% Quartile','Median','75% Quartile','Max' )
results = c(mean(x,na.rm = T), sd(x,na.rm = T), Mode(x), skewness(x), kurtosis(x) )
results2 = c(quantile(x))
data.frame(stats, results, stats2, results2)
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
