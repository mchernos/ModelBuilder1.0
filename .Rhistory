?denscomp
denscomp(fitdist(data$"fish_habitat", x), xlab = '', dempcol = 'blue',
legendtext = x, )
denscomp(fitdist(data$"fish_habitat", x), xlab = '', datacol = 'blue',
legendtext = x, )
x = month.name[1:4]
x
strptime(x, format = '%m')
strptime(x, format = '%b')
strptime(x, format = 'b')
strptime(x, format = '%M')
strptime(x)
?strptime
strptime(x, format = '%B')
x
strptime(x, format = 'B')
strptime(x, format = '%B')
x
as.Date(x)
as.Date(x, '%B')
?as.Date
as.Date(x, '%m')
as.Date(x, '%d')
as.Date(x, '%b')
as.Date(x, '%B')
as.Date('January', '%B')
strptime('January', '%B')
strptime('January', '%b')
strptime('January', '%h')
strptime(as.factor('January'), '%h')
month('January')
library('lubridate')
month('January')
strptime('January')
x
strptime(x)
strptime(x, format = '%B')
month(x)
month(as.Date(x))
strptime(paste(x, 1), '%B %d')
distrb = list('norm', 'gamma', 'lnorm', 'weibull', 'nbinom', 'pois')
x = distrb[[1]]
denscomp(fitdist(data$"fish_habitat", x), xlab = '', datacol = 'blue',
legendtext = x, )
library(fitdistrplus)
distrb = list('norm', 'gamma', 'lnorm', 'weibull', 'nbinom', 'pois')
x = distrb[[1]]
denscomp(fitdist(data$"fish_habitat", x), xlab = '', datacol = 'blue',
legendtext = x, )
distrb = list('norm', 'gamma', 'lnorm', 'weibull', 'nbinom', 'pois')
x = distrb[[1]]
denscomp(fitdist(data$"fish_habitat", x), xlab = '', datacol = 'blue',
legendtext = x, )
denscomp(fitdist(data$"fish_habitat", x), xlab = '',
datacol = 'blue',
legendtext = x )
legheadendtext = x, )
head(data)
# Alces Correlations to Riparian Health
rm(list = ls())
library('shiny')
library('dplyr')
library('tidyr')
library('corrplot')                     # package corrplot
library('MASS')
library('Kendall')
library('fitdistrplus')
# Fit Plot FUNCTION
fit.plot = function(predictand, x){
par(mfrow = c(1,2))
# Plot Predicted Model against Observed Values
plot(predictand, x$fitted.values, pch = 19,  # NEED TO FIX
xlab = 'Observed', ylab = 'Predicted',
col = rgb(0,0,0,0.6),
main = '')
abline(0,1, col = 'red', lwd = 2)
# Plot Residuals
plot(x$residuals, pch = 19, ylab = 'Residuals', col = rgb(0,0,0,0.6))
abline(h = 0, lwd = 2, lty = 2, col = 'red')
}
####################
# Read in the Data #
####################
filelist = list.files('Data', pattern = '*.csv')
read.data = function(filename){
temp = read.csv(paste0('Data/',filename)) %>%
gather(Year, Value, -row, -col)
temp$Year = gsub('X','',temp$Year)
colnames(temp)[4] = gsub('.csv', '',filename)
temp
}
# Read in and merge all datasets
# data = lapply(filelist, function(x) read.data(x)) %>%
#   Reduce(function(x,y) full_join(x,y, by = c('row', 'col', 'Year')), .)
# Y = F
#
# data = data %>%
#   filter(Year %in% 1900:1930)
# if (Y){
# data = data %>%
#   gather(Stat, Value,  -row, -col, -Year) %>%
#   group_by(Year, Stat) %>%
#   summarise(Value = mean(Value)) %>%
#   spread(key = Stat, value =Value)
# }
#
#
# X %>%
#   add(1) %>%
#   {if(Y) add(1) else .}
# data = data[sample(nrow(data), 1000), ]
# TEMP DATA
data = read.csv('Data/data.csv')
# ggplot(aes(x = row, y = col, colour = fish_habitat), data = data) + geom_point()
data$Year = as.numeric(data$Year)
distrb = list('norm', 'gamma', 'lnorm', 'weibull', 'nbinom', 'pois')
x = distrb[[1]]
denscomp(fitdist(data$"fish_habitat", x), xlab = '',
datacol = 'blue',
legendtext = x )
denscomp(fitdist(data$"fish_habitat", x), xlab = '',
datacol = 'blue',
legendtext = x,
breaks = 10)
?denscomp
fitdist(data$"fish_habitat", x)
summary(fitdist(data$"fish_habitat", x))
fitdist(data$"fish_habitat", x)$predict
plot(fitdist(data$"fish_habitat", x, breaks = 10))
plot(fitdist(data$"fish_habitat", 'gamma', breaks = 10))
plot(fitdist(data$"fish_habitat", 'lnorm', breaks = 10))
plot(fitdist(data$"fish_habitat", 'weibull', breaks = 10))
plot(fitdist(data$"fish_habitat", 'weibull', breaks = 100))
plot(fitdist(data$"fish_habitat", 'weibull'))
denscomp(list(fw, fln, fg), legendtext = plot.legend)
denscomp(fitdist(data$"fish_habitat", 'weibull'))
denscomp(fitdist(data$"fish_habitat", 'weibull', breaks = 20))
denscomp(fitdist(data$"fish_habitat", 'weibull', breaks = 10))
denscomp(fitdist(data$"fish_habitat", 'weibull'))
hist()
hist(data$"fish_habitat")
lines(fitdist(data$"fish_habitat", 'weibull'))
abline(fitdist(data$"fish_habitat", 'weibull'))
abline(fitdist(data$"fish_habitat", 'weibull'))
hist(data$"fish_habitat", freq = F)
abline(fitdist(data$"fish_habitat", 'weibull'))
line(fitdist(data$"fish_habitat", 'weibull'))
?fitdist
fw <- fitdist(data$road_density, distr  = "nbinom")
fw <- fitdist(data$road_density, distr  = "lnorm")
fw <- fitdist(data$road_density, distr  = "gamma")
fg <- fitdist(data$"fish_habitat", "gamma")
plot(fg)
plot(fg[[1]])
plot(fg[1])
plot(fg)
hist(data$fish_habitat)
plot(fg, add = T)
hist(data$fish_habitat)
lines(fg)
fg <- fitdist(data$"fish_habitat", "gamma")
fg <- fitdist(data$"fish_habitat", "gamma", breaks = 30)
fg <- fitdist(data$"fish_habitat", "gamma", break = 30)
fg <- fitdist(data$"fish_habitat", "gamma")
plot(fg, breaks = 20)
denscomp(fg)
denscomp(fg, breaks = 2-)
denscomp(fg, breaks = 20)
?denscomp
denscomp(fg, prob = F)
denscomp(fg, prob = F, breaks = 10)
denscomp(fg, prob = F)
cdfcomp(fg)
denscomp(fg, breaks = 20)
denscomp(fg)
denscomp(fg, breaks = 20)
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
denscomp(fg, breaks = 20)
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
fw <- fitdist(data$road_density, distr  = "gamma")
fg <- fitdist(data$"fish_habitat", "gamma")
fg
summary(fg)
gofstat(fg)
descdist(data$"fish_habitat", boot = 1000)
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
fw <- fitdist(data$road_density, distr  = "gamma")
fg <- fitdist(data$"fish_habitat", "gamma")
fln <- fitdist(data$"fish_habitat", "lnorm")
plot.legend <- c("Weibull", "lognormal", "gamma")
denscomp(list(fw, fln, fg), legendtext = plot.legend)
denscomp(fg)
denscomp(fg, )
?denscomp
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
fw <- fitdist(data$road_density, distr  = "gamma")
fg <- fitdist(data$"fish_habitat", "gamma")
fln <- fitdist(data$"fish_habitat", "lnorm")
plot.legend <- c("Weibull", "lognormal", "gamma")
denscomp(list(fw, fln, fg), legendtext = plot.legend)
cdfcomp(fg)
cdfcomp(fg)
fg <- fitdist(data$"fish_habitat", "pois")
fg <- fitdist(data$road_density, "pois")
Y1 <- 100
set.seed(101) ## for reproducibility
x.pois<-rpois(Y1, 20)
hist(x.pois, breaks=100,freq=FALSE)
lines(density(x.pois, bw=0.8), col="red")
library(MASS)
(my.mle<-fitdistr(x.pois, densfun="poisson"))
BIC(my.mle)
plot(mr.mle)
plot(my.mle)
my.mle
denscomp(my.mle)
(my.mle<-fitdist(x.pois, densfun="poisson"))
(my.mle<-fitdist(x.pois, distr="poisson"))
(my.mle<-fitdist(x.pois, distr="pois"))
x.pois
plot(my.mle)
gofstat(my.mle)
?denscomp
my.mle
hist(my.mle)
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
fitdist(data$"fish_habitat", 'gamma')
fitdist(data$"fish_habitat", 'gamma', breaks = 10)
fitdist(data$"fish_habitat", 'gamma', breaks = 100)
fitdist(data$"fish_habitat", 'gamma', breaks = 20)
fitdist(data$"fish_habitat", 'gamma', breaks = 2)
fitdist(data$"fish_habitat", 'gamma', breaks = 1)
fitdist(data$"fish_habitat", 'gamma')
?fitdist
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
?stat_smooth
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
?selectInput
?rlm
?loess
?gam
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
?lnorm
??lnorm
?nbinom
??nbinom
?mle
?qme
?mge
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
x = data$fish_habitat
shapiro.test(x)
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
head(data)
data$Norman = rnorm(length(data))
data$Norman = rnorm(1000)
head(data)
data$Poisson = rpois(1000)
data$Poisson = rpois(1000,1)
head(data)
write.csv(data, 'data2.csv')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
?mtext
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
sd
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
head(data)
data$road_density = ifelse(data$"road_density" == 0, NA, data$"road_density")
head(data)
fit = lm(road_density~fish_habitat, data = data)
fit.plot(data$"road_density", fit)
predictand = data$road_density
x = fit
plot(predictand, x$fitted.values, pch = 19,
xlab = 'Observed', ylab = 'Predicted',
col = rgb(0,0,0,0.6),
main = '')
length(predictand)
length(x$fitted.values)
?na.omit
?lm
plot(na.omit(predictand), x$fitted.values, pch = 19,
)
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
head(data)
data = data %>%
gather(Stat, Value,  -row, -col, -Year) %>%
group_by(Year, Stat)
head(data)
# Alces Correlations to Riparian Health
rm(list = ls())
library('shiny')
library('dplyr')
library('tidyr')
library('corrplot')                     # package corrplot
library('MASS')
library('Kendall')
library('fitdistrplus')
library('ggplot2')
# Fit Plot FUNCTION
fit.plot = function(predictand, x){
# par(mfrow = c(1,2))
# Plot Predicted Model against Observed Values
plot(na.omit(predictand), x$fitted.values, pch = 19,
xlab = 'Observed', ylab = 'Predicted',
col = rgb(0,0,0,0.6),
main = '')
mtext('Predicted vs. Modelled', 3)
abline(0,1, col = 'red', lwd = 2)
# Plot Residuals
plot(x$residuals, pch = 19, ylab = 'Residuals',
col = rgb(0,0,0,0.6),
main = '')
mtext('Indexed Residuals', 3)
abline(h = 0, lwd = 2, lty = 2, col = 'red')
}
####################
# Read in the Data #
####################
filelist = list.files('Data', pattern = '*.csv')
read.data = function(filename){
temp = read.csv(paste0('Data/',filename)) %>%
gather(Year, Value, -row, -col)
temp$Year = gsub('X','',temp$Year)
colnames(temp)[4] = gsub('.csv', '',filename)
temp
}
# Read in and merge all datasets
# data = lapply(filelist, function(x) read.data(x)) %>%
#   Reduce(function(x,y) full_join(x,y, by = c('row', 'col', 'Year')), .)
# Y = F
#
# data = data %>%
#   filter(Year %in% 1900:1930)
# if (Y){
# data = data %>%
#   gather(Stat, Value,  -row, -col, -Year) %>%
#   group_by(Year, Stat) %>%
#   summarise(Value = mean(Value)) %>%
#   spread(key = Stat, value =Value)
# }
#
#
# X %>%
#   add(1) %>%
#   {if(Y) add(1) else .}
# data = data[sample(nrow(data), 1000), ]
# TEMP DATA
data = read.csv('Data/data2.csv')
# ggplot(aes(x = row, y = col, colour = fish_habitat), data = data) + geom_point()
data$Year = as.numeric(data$Year)
head(data)
data$road_density = ifelse(data$"road_density"==0, NA, data$"road_density")
head(data)
data = data %>%
gather(Stat, Value,  -row, -col, -Year) %>%
group_by(Year, Stat)
data %>%
summarise(Value = mean(Value, na.rm = T)) %>%
spread(key = Stat, value =Value)
data %>%
summarise(Value = median(Value)) %>%
spread(key = Stat, value =Value)
data %>%
summarise(Value = sum(na.omit(Value))) %>%
spread(key = Stat, value =Value)
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
data = data %>%
gather(Stat, Value,  -row, -col, -Year) %>%
group_by(Year, Stat)
data = data %>%
summarise(Value = mean(Value, na.rm = T)) %>%
spread(key = Stat, value =Value)
head(data)
corrplot(cor(data))
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
shiny::runApp('~/Dropbox/Hydrology Consulting Work/Alces Correlations/ModelBuilder1.0/ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
?DATATABLE
datatable
?datatable
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
library('shiny')
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
