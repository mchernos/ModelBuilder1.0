source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
head(data)
tail(data)
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
filelist
head(read.data(filelist[2]))
head(read.data(filelist[3]))
head(read.data(filelist[1]))
tail(read.data(filelist[1]))
data = lapply(filelist, function(x) read.data(x)) %>%
Reduce(function(x,y) full_join(x,y, by = non_data_cols), .)
head(data)
data[complete.cases(data),]
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Alces Correlations to Riparian Health
# Clean up workspace
rm(list = ls())
# Check for installed packages (install if need be)
packages = c('shiny', 'dplyr', 'tidyr','corrplot', 'DT',
'MASS', 'ggplot2', 'Kendall', 'fitdistrplus',
'e1071', 'relaimpo', 'mgcv')
x = lapply(packages, function(x){if (!require(x, character.only = T)) install.packages(x)})
x = lapply(packages, require, character.only = T)
rm(x, packages)
############ LOAD FUNCTIONS ###################
source('ModelBuilder/denscomp1.R') # Density histogram plot for interactive breaks
source('ModelBuilder/fitfuncs.R') # Fit Functions
####################
# Read in the Data #
####################
filelist = list.files('ModelBuilder/Data', pattern = '*.csv')
# Function to read in the Data
read.data = function(filename){
temp = read.csv(paste0('ModelBuilder/Data/',filename))
if(colnames(temp)[1] == 'name'){
temp = gather(temp, Year, Value, -name)
}else {
temp = gather(temp, Year, Value, -row, -col)
}
temp$Year = gsub('X','',temp$Year)
colnames(temp)[length(temp)] = gsub('.csv', '',filename)
temp
}
# Need to use as template for reading in all the rest of 'em
temp = read.csv(paste0('ModelBuilder/Data/',filelist[1]))
regionalized = (colnames(temp)[1] == 'name')
if(regionalized){   non_data_cols = c('name', 'Year')
}else {           non_data_cols = c('row', 'col', 'Year') }
# Read in and merge all datasets, Conditional on if data are regionalized
data = lapply(filelist, function(x) read.data(x)) %>%
Reduce(function(x,y) full_join(x,y, by = non_data_cols), .)
if(!regionalized){ data = data %>% sample_n(2500) }
data$Year = as.numeric(data$Year)
rm(temp)
# END HELPER #
head(data)
# Alces Correlations to Riparian Health
# Clean up workspace
rm(list = ls())
# Check for installed packages (install if need be)
packages = c('shiny', 'dplyr', 'tidyr','corrplot', 'DT',
'MASS', 'ggplot2', 'Kendall', 'fitdistrplus',
'e1071', 'relaimpo', 'mgcv')
x = lapply(packages, function(x){if (!require(x, character.only = T)) install.packages(x)})
x = lapply(packages, require, character.only = T)
rm(x, packages)
############ LOAD FUNCTIONS ###################
source('ModelBuilder/denscomp1.R') # Density histogram plot for interactive breaks
source('ModelBuilder/fitfuncs.R') # Fit Functions
####################
# Read in the Data #
####################
filelist = list.files('ModelBuilder/Data', pattern = '*.csv')
# Function to read in the Data
read.data = function(filename){
temp = read.csv(paste0('ModelBuilder/Data/',filename))
if(colnames(temp)[1] == 'name'){
temp = gather(temp, Year, Value, -name)
}else {
temp = gather(temp, Year, Value, -row, -col)
}
temp$Year = gsub('X','',temp$Year)
colnames(temp)[length(temp)] = gsub('.csv', '',filename)
temp
}
# Need to use as template for reading in all the rest of 'em
temp = read.csv(paste0('ModelBuilder/Data/',filelist[1]))
regionalized = (colnames(temp)[1] == 'name')
if(regionalized){   non_data_cols = c('name', 'Year')
}else {           non_data_cols = c('row', 'col', 'Year') }
# Read in and merge all datasets, Conditional on if data are regionalized
data = lapply(filelist, function(x) read.data(x)) %>%
Reduce(function(x,y) full_join(x,y, by = non_data_cols), .)
if(!regionalized){ data = data %>% sample_n(2500) }
data$Year = as.numeric(data$Year)
rm(temp)
# END HELPER #
head(data)
tail(data)
head(data)
unique(data$Year)
# Alces Correlations to Riparian Health
# Clean up workspace
rm(list = ls())
# Check for installed packages (install if need be)
packages = c('shiny', 'dplyr', 'tidyr','corrplot', 'DT',
'MASS', 'ggplot2', 'Kendall', 'fitdistrplus',
'e1071', 'relaimpo', 'mgcv')
x = lapply(packages, function(x){if (!require(x, character.only = T)) install.packages(x)})
x = lapply(packages, require, character.only = T)
rm(x, packages)
############ LOAD FUNCTIONS ###################
source('ModelBuilder/denscomp1.R') # Density histogram plot for interactive breaks
source('ModelBuilder/fitfuncs.R') # Fit Functions
####################
# Read in the Data #
####################
filelist = list.files('ModelBuilder/Data', pattern = '*.csv')
# Function to read in the Data
read.data = function(filename){
temp = read.csv(paste0('ModelBuilder/Data/',filename))
if(colnames(temp)[1] == 'name'){
temp = gather(temp, Year, Value, -name)
}else {
temp = gather(temp, Year, Value, -row, -col)
}
temp$Year = gsub('X','',temp$Year)
colnames(temp)[length(temp)] = gsub('.csv', '',filename)
temp
}
# Need to use as template for reading in all the rest of 'em
temp = read.csv(paste0('ModelBuilder/Data/',filelist[1]))
regionalized = (colnames(temp)[1] == 'name')
if(regionalized){   non_data_cols = c('name', 'Year')
}else {           non_data_cols = c('row', 'col', 'Year') }
# Read in and merge all datasets, Conditional on if data are regionalized
data = lapply(filelist, function(x) read.data(x)) %>%
Reduce(function(x,y) full_join(x,y, by = non_data_cols), .)
if(!regionalized){ data = data %>% sample_n(2500) }
data$Year = as.numeric(data$Year)
rm(temp)
# END HELPER #
head(data)
tail(data)
data = data %>%
gather(Stat, Value, -name, -Year) %>%
group_by(Year, Stat)
head(data)
head(data.frame(data))
# Alces Correlations to Riparian Health
# Clean up workspace
rm(list = ls())
# Check for installed packages (install if need be)
packages = c('shiny', 'dplyr', 'tidyr','corrplot', 'DT',
'MASS', 'ggplot2', 'Kendall', 'fitdistrplus',
'e1071', 'relaimpo', 'mgcv')
x = lapply(packages, function(x){if (!require(x, character.only = T)) install.packages(x)})
x = lapply(packages, require, character.only = T)
rm(x, packages)
############ LOAD FUNCTIONS ###################
source('ModelBuilder/denscomp1.R') # Density histogram plot for interactive breaks
source('ModelBuilder/fitfuncs.R') # Fit Functions
####################
# Read in the Data #
####################
filelist = list.files('ModelBuilder/Data', pattern = '*.csv')
# Function to read in the Data
read.data = function(filename){
temp = read.csv(paste0('ModelBuilder/Data/',filename))
if(colnames(temp)[1] == 'name'){
temp = gather(temp, Year, Value, -name)
}else {
temp = gather(temp, Year, Value, -row, -col)
}
temp$Year = gsub('X','',temp$Year)
colnames(temp)[length(temp)] = gsub('.csv', '',filename)
temp
}
# Need to use as template for reading in all the rest of 'em
temp = read.csv(paste0('ModelBuilder/Data/',filelist[1]))
regionalized = (colnames(temp)[1] == 'name')
if(regionalized){   non_data_cols = c('name', 'Year')
}else {           non_data_cols = c('row', 'col', 'Year') }
# Read in and merge all datasets, Conditional on if data are regionalized
data = lapply(filelist, function(x) read.data(x)) %>%
Reduce(function(x,y) full_join(x,y, by = non_data_cols), .)
if(!regionalized){ data = data %>% sample_n(2500) }
data$Year = as.numeric(data$Year)
rm(temp)
# END HELPER #
head(data)
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
head(data)
tail(data)
head(filter(data, Year %in% 1900:2060))
head(filter(data, `Energy Mines` >=0 & `Energy Mines` <= 10000))
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
head(data)
input$predictand = 'Energy Mines'
input = data.frame()
input$predictand = 'Energy Mines'
max(data)
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
?selectizeInput
# Run ALCES ModelBuilder
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
?actionButton
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source('ModelBuilder/helper.R')
runApp('ModelBuilder')
file.path('ModelBuilder', 'helper.R')
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source(file.path('ModelBuilder', 'helper.R'))
runApp('ModelBuilder')
rm(list = ls())
# Check for installed packages (install if need be)
packages = c('shiny', 'dplyr', 'tidyr','corrplot', 'DT',
'MASS', 'ggplot2', 'Kendall', 'fitdistrplus',
'e1071', 'relaimpo', 'mgcv')
x = lapply(packages, function(x){if (!require(x, character.only = T)) install.packages(x)})
x = lapply(packages, require, character.only = T)
rm(x, packages)
source(file.path('ModelBuilder', 'denscomp1.R'))
# source('ModelBuilder/fitfuncs.R') # Fit Functions
source(file.path('ModelBuilder', 'fitfuncs.R'))
filelist = list.files(file.path('ModelBuilder','Data'), pattern = '*.csv')
filelist
filename[1]
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source(file.path('ModelBuilder', 'helper.R'))
runApp('ModelBuilder')
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source(file.path('ModelBuilder', 'helper.R'))
runApp('ModelBuilder')
runGitHub('ModelBuilder1.0','mchernos', subdir = '/ModelBuilder')
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source(file.path('ModelBuilder', 'helper.R'))
runApp('ModelBuilder')
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source(file.path('ModelBuilder', 'helper.R'))
runApp('ModelBuilder')
library('markdown')
library('rmarkdown')
?selectizeInput
head(data)
colnames(data)
colnames(data)[-]
non_data_cols
colnames(data)[-non_data_cols]
colnames(data)[-c(non_data_cols)]
colnames(data)[colnames(data)%in%c(non_data_cols)]
colnames(data)[!(colnames(data)%in% non_data_cols)]
x = colnames(data)[!(colnames(data)%in% non_data_cols)]
x
y = x[1:2]
y
data %>% select(non_data_cols) %>% head()
data %>% select(c(non_data_cols) %>% head()
)
data %>% select(c(non_data_cols)) %>% head()
data %>% select_(c(non_data_cols)) %>% head()
non_data_cols
head(data)
data %>% select_(non_data_cols) %>% head()
data %>% select_(non_data_cols, y) %>% head()
data %>% select_(non_data_cols:y) %>% head()
head(data[,non_data_cols])
head(data[,c(non_data_cols, y)])
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source(file.path('ModelBuilder', 'helper.R'))
runApp('ModelBuilder')
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source(file.path('ModelBuilder', 'helper.R'))
runApp('ModelBuilder')
lm(data[,1]~data[,2:3])
lm(data[,1]~data[,2])
ggplot(data = data, aes(x = Year, y = `Energy Mines`)) + geom_line()
ggplot(data = data, aes(x = Year, y = `Energy Mines`)) + geom_point()
ggplot(data = data, aes(x = Year, y = `Energy Mines`)) + geom_point() + stat_smooth
ggplot(data = data, aes(x = Year, y = `Energy Mines`)) + geom_point() + stat_smooth()
ggplot(data = data, aes(x = Year, y = `Energy Mines`)) + geom_point() + stat_smooth(method = 'lm')
ggplot(data = data, aes(x = Year, y = `Energy Mines`)) + geom_point() + stat_smooth(method = 'lm', c)
?stat_smooth
ggplot(data = data, aes(x = Year, y = `Energy Mines`)) + geom_point() + stat_smooth(method = 'lm', level = 0.1)
ggplot(data = data, aes(x = Year, y = `Energy Mines`)) + geom_point() + stat_smooth(method = 'lm', level = 0.95)
ggplot(data = data, aes(x = Year, y = `Energy Mines`)) + geom_point() + stat_smooth( level = 0.95)
ggplot(data = data, aes(x = Year, y = `Energy Mines`)) + geom_point() + stat_smooth( level = 0.20)
ggplot(data = data, aes(x = Year, y = `Energy Mines`)) + geom_point() + stat_smooth( level = 0.20)
ggplot(data = data, aes(x = Year, y = `Energy Mines`)) + geom_point() + stat_smooth( level = 0)
ggplot(data = data, aes(x = Year, y = `Energy Mines`)) + geom_point() + stat_smooth( level = 2)
ggplot(data = data, aes(x = Year, y = `Energy Mines`)) + geom_point() + stat_smooth( level = 0.6)
head(data)
ggplot(data = data, aes(x = `Total Mercury`, y = `Energy Mines`)) + geom_point() + stat_smooth( level = 0.6)
ggplot(data = data, aes(x = `Total Mercury`, y = `Energy Mines`)) + geom_point() + stat_smooth( level = 0.95)
ggplot(data = data, aes(x = `Total Mercury`, y = `Energy Mines`)) + geom_point() + stat_smooth( level = 0.99)
ggplot(data = data, aes(x = `Total Mercury`, y = `Energy Mines`)) + geom_point() + stat_smooth( level = 0.999999)
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source(file.path('ModelBuilder', 'helper.R'))
runApp('ModelBuilder')
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source(file.path('ModelBuilder', 'helper.R'))
runApp('ModelBuilder')
x = 1:10, y = 2:11
x = 1:10; y = 2:11
x
y
xx = data.frame(x, y)
ggplot(xx, aes(x,y)) + geom_point()
ggplot(xx, aes(x,y)) + geom_point() + stat_smooth()
ggplot(xx, aes(x,y)) + geom_point() + stat_smooth(span = 0.1)
warnings()
xx$y = xx$y + rnorm(10)
ggplot(xx, aes(x,y)) + geom_point() + stat_smooth(span = 0.1)
ggplot(xx, aes(x,y)) + geom_point() + stat_smooth(span = 1)
ggplot(xx, aes(x,y)) + geom_point() + stat_smooth(span = 1, level = 0.5)
xx$y[7] = NA
ggplot(xx, aes(x,y)) + geom_point() + stat_smooth(span = 1, level = 0.5)
ggplot(xx, aes(x,y)) + geom_point() + stat_smooth(span = 1, level = 0.5, na.rm = T)
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source(file.path('ModelBuilder', 'helper.R'))
runApp('ModelBuilder')
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source(file.path('ModelBuilder', 'helper.R'))
runApp('ModelBuilder')
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source(file.path('ModelBuilder', 'helper.R'))
runApp('ModelBuilder')
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source(file.path('ModelBuilder', 'helper.R'))
runApp('ModelBuilder')
ggplot(data, aes(x = Year, y = `Energy Mines`)) + geom_point() + stat_smooth()
ggplot(data, aes(x = Year, y = `Energy Mines`)) + geom_point() + stat_smooth(level = 0.99)
ggplot(data, aes(x = Year, y = `Energy Mines`)) + geom_point() + stat_smooth(level = 0.95)
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source(file.path('ModelBuilder', 'helper.R'))
runApp('ModelBuilder')
ggplot(data, aes(x = Year, y = `Energy Mines`)) + geom_point() + stat_smooth(level = 0.95)
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source(file.path('ModelBuilder', 'helper.R'))
runApp('ModelBuilder')
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source(file.path('ModelBuilder', 'helper.R'))
runApp('ModelBuilder')
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source(file.path('ModelBuilder', 'helper.R'))
runApp('ModelBuilder')
# Run ALCES ModelBuilder
#
# ALCES ModelBuilder is written by Matt Chernos
# March 2016
#
# Run the program by selecting and running the following code:
source(file.path('ModelBuilder', 'helper.R'))
runApp('ModelBuilder')
source('helper.R')
runApp('ModelBuilder')
runApp('')
runApp()
source('helper.R')
runApp()
source('helper.R')
runApp()
